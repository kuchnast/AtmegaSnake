#pragma once

#include <avr/pgmspace.h>

#include "Config.hpp"
#include "SnakeGame.hpp"
#include "DigitalPin.hpp"
#include "Keyboard.hpp"
#include "Joystick.hpp"
#include "SingleRecord.hpp"

static const unsigned char snake_bits[] PROGMEM = {
    0x00, 0x00, 0xfe, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0x7f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
    0x00, 0xc0, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00,
    0xe0, 0x03, 0x00, 0x00, 0x00, 0xf0, 0x03, 0x00, 0xc0, 0x07, 0x00, 0x00,
    0x00, 0xf8, 0x01, 0x00, 0x80, 0x0f, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00,
    0x80, 0x1f, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00,
    0x00, 0xfc, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00,
    0x00, 0x78, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
    0x00, 0x1c, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x1e, 0x1e, 0x00,
    0x3c, 0x78, 0x00, 0x00, 0x00, 0x1e, 0x1e, 0x00, 0x3c, 0xf0, 0x00, 0x00,
    0x00, 0x1e, 0x1e, 0x00, 0x3c, 0xf0, 0x01, 0x00, 0x00, 0x1e, 0x1e, 0x00,
    0x3c, 0xf0, 0x03, 0x00, 0x00, 0x1e, 0x1e, 0x00, 0x3c, 0xe0, 0x07, 0x00,
    0x00, 0x1e, 0x1e, 0x00, 0x3c, 0xc0, 0x07, 0x00, 0x00, 0x1e, 0x1e, 0x00,
    0x3c, 0xc0, 0x07, 0x00, 0x00, 0x1e, 0x1e, 0x00, 0x3c, 0xc0, 0x07, 0x00,
    0x00, 0x1e, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x1e, 0x00, 0x00,
    0x00, 0xc0, 0x07, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00,
    0x00, 0x3e, 0x80, 0x01, 0x03, 0xc0, 0x07, 0x00, 0x00, 0x7c, 0x80, 0x83,
    0x03, 0xe0, 0x03, 0x00, 0x00, 0xf8, 0x01, 0xff, 0x01, 0xf8, 0x01, 0x00,
    0x00, 0xf0, 0x03, 0xfe, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xf0, 0x07, 0x00,
    0x00, 0x7e, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x7f, 0x00, 0x00,
    0x00, 0x00, 0xfe, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff,
    0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0xf8, 0x07, 0xfc,
    0x80, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x01, 0x7c, 0x00, 0xff, 0x07, 0x00,
    0x00, 0x7f, 0x00, 0x3e, 0x00, 0xfe, 0x0f, 0x00, 0x80, 0x07, 0x00, 0x1f,
    0x00, 0xfc, 0x1f, 0x00, 0xc0, 0x01, 0x80, 0x1f, 0x00, 0xfe, 0x3f, 0x00,
    0xe0, 0x00, 0xf8, 0x0f, 0x00, 0xff, 0x7f, 0x00, 0x70, 0x00, 0xfe, 0x07,
    0x80, 0xff, 0x7f, 0x00, 0x38, 0x00, 0x1f, 0x00, 0xc0, 0x3f, 0xfe, 0x00,
    0x1c, 0xc0, 0x07, 0x00, 0xe0, 0x1f, 0xfc, 0x01, 0x0e, 0xe0, 0x03, 0x00,
    0xf0, 0x0f, 0xf8, 0x07, 0x0e, 0xe0, 0x03, 0x00, 0xf8, 0x07, 0xf8, 0x07,
    0x0f, 0xe0, 0x07, 0x00, 0xfc, 0x03, 0xf0, 0x0f, 0x0f, 0xe0, 0x0f, 0x00,
    0xfe, 0x03, 0xf0, 0x1f, 0x0f, 0xc0, 0xff, 0xff, 0xff, 0x01, 0xe0, 0x3d,
    0x0f, 0x80, 0xff, 0xff, 0xff, 0x00, 0xe0, 0x78, 0x0f, 0x00, 0xff, 0xff,
    0x7f, 0x00, 0x70, 0x70, 0x0f, 0x00, 0xfe, 0xff, 0x3f, 0x00, 0x78, 0xf0,
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xf0, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7e, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0,
    0x3e, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 0xf0, 0x7e, 0x00, 0x00, 0x00,
    0x00, 0xc0, 0x7f, 0xf0, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x7f, 0xf0,
    0xf8, 0x01, 0x00, 0x00, 0x00, 0xf0, 0x7f, 0x70, 0xf0, 0x03, 0x00, 0x00,
    0x00, 0xf8, 0xff, 0x78, 0xe0, 0x07, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x3d,
    0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x1f, 0x80, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x80, 0x0f, 0x00, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x07,
    0x00, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x07};

class Menu
{
private:
    Display &display_;

public:
    Menu(Display &display): display_(display) {}

    void showSnakeScrean()
    {
        display_.firstPage();
        do
        {
            display_.clearBuffer();
            display_.setFont(u8g2_font_lucasarts_scumm_subtitle_o_tf);
            display_.drawStr(64, 15, "SNAKE");
            display_.drawStr(67, 30, "GAME");
            display_.setFont(u8g2_font_5x8_tf);
            display_.drawStr(88, 44, "MOVE");
            display_.drawStr(92, 54, "TO");
            display_.drawStr(86, 64, "START");
            display_.drawXBMP(0, 0, 64, 64, snake_bits);
        } while (display_.nextPage());
    }

    void showWelcomeScrean(bool invert)
    {
        display_.firstPage();
        display_.setFont(u8g2_font_lucasarts_scumm_subtitle_o_tf);
        do
        {
            if(invert)
            {
                display_.drawBox(0, 0, 128, 64);
                display_.setDrawColor(0);
                display_.drawStr(20, 40, "WELCOME");
                display_.setDrawColor(1);
            }
            else
            {
                display_.drawStr(20, 40, "WELCOME");
            }
        } while (display_.nextPage());
    }

    void ShowMainMenu(uint8_t highlight_opt)
    {
        display_.firstPage();
        do
        {
            display_.clearBuffer();
            display_.setFont(u8g2_font_6x12_me);
            display_.setFontMode(0);

            if(highlight_opt == 0)
                display_.setDrawColor(0);
            else
                display_.setDrawColor(1);
            display_.drawStr(36, 15, "PLAY SNAKE");

            if (highlight_opt == 1)
                display_.setDrawColor(0);
            else
                display_.setDrawColor(1);
            display_.drawStr(36, 30, "LAST SCORE");

            if (highlight_opt == 2)
                display_.setDrawColor(0);
            else
                display_.setDrawColor(1);
            display_.drawStr(45, 45, "SETINGS");

            if (highlight_opt == 3)
                display_.setDrawColor(0);
            else
                display_.setDrawColor(1);
            display_.drawStr(50, 60, "EXIT");
        } while (display_.nextPage());
    }

    uint8_t MainMenu(Joystick & j, Keyboard4x4 & keyboard)
    {
        uint8_t highlight = 0;
        do
        {
            if (j.sprawdzRuch() == RUCH::DOWN || keyboard.read() == '8')
            {
                while (j.sprawdzRuch() == RUCH::DOWN || keyboard.read() == '8')
                {
                }
                if (highlight == 3)
                    highlight = 0;
                else
                    ++highlight;
            }

            if (j.sprawdzRuch() == RUCH::UP || keyboard.read() == '2')
            {
                while (j.sprawdzRuch() == RUCH::UP || keyboard.read() == '2')
                {
                }
                if (highlight)
                    --highlight;
                else
                    highlight = 3;
            }

            ShowMainMenu(highlight);
        } while (j.sprawdzPrzycisk() && keyboard.read() != '5');

        return highlight;
    }

    void ShowSetingsMenu(uint8_t highlight_opt, bool keyboard_is_active, bool joystick_is_active)
    {
        display_.firstPage();
        do
        {
            display_.clearBuffer();
            display_.setFont(u8g2_font_6x12_me);
            display_.setFontMode(0);

            if (highlight_opt == 0)
                display_.setDrawColor(0);
            else
                display_.setDrawColor(1);
            display_.drawStr(20, 15, "KEYBOARD");

            if (highlight_opt == 1)
                display_.setDrawColor(0);
            else
                display_.setDrawColor(1);
            display_.drawStr(20, 30, "JOYSTICK");

            if (highlight_opt == 2)
                display_.setDrawColor(0);
            else
                display_.setDrawColor(1);
            display_.drawStr(20, 45, "BACK TO MENU");

            display_.setDrawColor(1);

            if (keyboard_is_active)
                display_.drawBox(88, 3, 12, 12);
            else
                display_.drawFrame(88, 3, 12, 12);

            if (joystick_is_active)
                display_.drawBox(88, 18, 12, 12);
            else
                display_.drawFrame(88, 18, 12, 12);
        } while (display_.nextPage());
    }

    uint8_t SetingsMenu(Joystick &j, Keyboard4x4 &keyboard)
    {
        uint8_t highlight = 0;

        do
        {
            if (j.sprawdzRuch() == RUCH::DOWN || keyboard.read() == '8')
            {
                while (j.sprawdzRuch() == RUCH::DOWN || keyboard.read() == '8')
                {
                }
                if (highlight == 2)
                    highlight = 0;
                else
                    ++highlight;
            }

            if (j.sprawdzRuch() == RUCH::UP || keyboard.read() == '2')
            {
                while (j.sprawdzRuch() == RUCH::UP || keyboard.read() == '2')
                {
                }
                if (highlight)
                    --highlight;
                else
                    highlight = 2;
            }

            ShowSetingsMenu(highlight, keyboard.getIsActive(), j.getIsActive());
        } while (j.sprawdzPrzycisk() && keyboard.read() != '5');

        return highlight;
    }

    void ScoreMenu(Joystick &j, Keyboard4x4 &keyboard)
    {
        SingleRecord t(10);
        t.showRecord(display_, 40, 40);
        while (j.sprawdzPrzycisk() && keyboard.read() != '5'){}
    }
};